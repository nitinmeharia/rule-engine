// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workflows.sql

package db

import (
	"context"
)

const CreateWorkflow = `-- name: CreateWorkflow :exec
INSERT INTO workflows (namespace, workflow_id, version, status, start_at, steps, created_by)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateWorkflowParams struct {
	Namespace  string  `json:"namespace"`
	WorkflowID string  `json:"workflowId"`
	Version    int32   `json:"version"`
	Status     *string `json:"status"`
	StartAt    string  `json:"startAt"`
	Steps      []byte  `json:"steps"`
	CreatedBy  string  `json:"createdBy"`
}

func (q *Queries) CreateWorkflow(ctx context.Context, arg CreateWorkflowParams) error {
	_, err := q.db.Exec(ctx, CreateWorkflow,
		arg.Namespace,
		arg.WorkflowID,
		arg.Version,
		arg.Status,
		arg.StartAt,
		arg.Steps,
		arg.CreatedBy,
	)
	return err
}

const DeactivateWorkflow = `-- name: DeactivateWorkflow :exec
UPDATE workflows
SET status = 'inactive'
WHERE namespace = $1 AND workflow_id = $2 AND status = 'active'
`

type DeactivateWorkflowParams struct {
	Namespace  string `json:"namespace"`
	WorkflowID string `json:"workflowId"`
}

func (q *Queries) DeactivateWorkflow(ctx context.Context, arg DeactivateWorkflowParams) error {
	_, err := q.db.Exec(ctx, DeactivateWorkflow, arg.Namespace, arg.WorkflowID)
	return err
}

const DeleteWorkflow = `-- name: DeleteWorkflow :exec
DELETE FROM workflows
WHERE namespace = $1 AND workflow_id = $2 AND version = $3
`

type DeleteWorkflowParams struct {
	Namespace  string `json:"namespace"`
	WorkflowID string `json:"workflowId"`
	Version    int32  `json:"version"`
}

func (q *Queries) DeleteWorkflow(ctx context.Context, arg DeleteWorkflowParams) error {
	_, err := q.db.Exec(ctx, DeleteWorkflow, arg.Namespace, arg.WorkflowID, arg.Version)
	return err
}

const GetActiveWorkflowVersion = `-- name: GetActiveWorkflowVersion :one
SELECT namespace, workflow_id, version, status, start_at, steps, created_by, published_by, created_at, published_at
FROM workflows
WHERE namespace = $1 AND workflow_id = $2 AND status = 'active'
`

type GetActiveWorkflowVersionParams struct {
	Namespace  string `json:"namespace"`
	WorkflowID string `json:"workflowId"`
}

func (q *Queries) GetActiveWorkflowVersion(ctx context.Context, arg GetActiveWorkflowVersionParams) (*Workflow, error) {
	row := q.db.QueryRow(ctx, GetActiveWorkflowVersion, arg.Namespace, arg.WorkflowID)
	var i Workflow
	err := row.Scan(
		&i.Namespace,
		&i.WorkflowID,
		&i.Version,
		&i.Status,
		&i.StartAt,
		&i.Steps,
		&i.CreatedBy,
		&i.PublishedBy,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return &i, err
}

const GetDraftWorkflowVersion = `-- name: GetDraftWorkflowVersion :one
SELECT namespace, workflow_id, version, status, start_at, steps, created_by, published_by, created_at, published_at
FROM workflows
WHERE namespace = $1 AND workflow_id = $2 AND status = 'draft'
`

type GetDraftWorkflowVersionParams struct {
	Namespace  string `json:"namespace"`
	WorkflowID string `json:"workflowId"`
}

func (q *Queries) GetDraftWorkflowVersion(ctx context.Context, arg GetDraftWorkflowVersionParams) (*Workflow, error) {
	row := q.db.QueryRow(ctx, GetDraftWorkflowVersion, arg.Namespace, arg.WorkflowID)
	var i Workflow
	err := row.Scan(
		&i.Namespace,
		&i.WorkflowID,
		&i.Version,
		&i.Status,
		&i.StartAt,
		&i.Steps,
		&i.CreatedBy,
		&i.PublishedBy,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return &i, err
}

const GetMaxWorkflowVersion = `-- name: GetMaxWorkflowVersion :one
SELECT COALESCE(MAX(version), 0) as max_version
FROM workflows
WHERE namespace = $1 AND workflow_id = $2
`

type GetMaxWorkflowVersionParams struct {
	Namespace  string `json:"namespace"`
	WorkflowID string `json:"workflowId"`
}

func (q *Queries) GetMaxWorkflowVersion(ctx context.Context, arg GetMaxWorkflowVersionParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, GetMaxWorkflowVersion, arg.Namespace, arg.WorkflowID)
	var max_version interface{}
	err := row.Scan(&max_version)
	return max_version, err
}

const GetWorkflow = `-- name: GetWorkflow :one
SELECT namespace, workflow_id, version, status, start_at, steps, created_by, published_by, created_at, published_at
FROM workflows
WHERE namespace = $1 AND workflow_id = $2 AND version = $3
`

type GetWorkflowParams struct {
	Namespace  string `json:"namespace"`
	WorkflowID string `json:"workflowId"`
	Version    int32  `json:"version"`
}

func (q *Queries) GetWorkflow(ctx context.Context, arg GetWorkflowParams) (*Workflow, error) {
	row := q.db.QueryRow(ctx, GetWorkflow, arg.Namespace, arg.WorkflowID, arg.Version)
	var i Workflow
	err := row.Scan(
		&i.Namespace,
		&i.WorkflowID,
		&i.Version,
		&i.Status,
		&i.StartAt,
		&i.Steps,
		&i.CreatedBy,
		&i.PublishedBy,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return &i, err
}

const ListActiveWorkflows = `-- name: ListActiveWorkflows :many
SELECT namespace, workflow_id, version, status, start_at, steps, created_by, published_by, created_at, published_at
FROM workflows
WHERE namespace = $1 AND status = 'active'
ORDER BY workflow_id ASC
`

func (q *Queries) ListActiveWorkflows(ctx context.Context, namespace string) ([]*Workflow, error) {
	rows, err := q.db.Query(ctx, ListActiveWorkflows, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Workflow{}
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(
			&i.Namespace,
			&i.WorkflowID,
			&i.Version,
			&i.Status,
			&i.StartAt,
			&i.Steps,
			&i.CreatedBy,
			&i.PublishedBy,
			&i.CreatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListWorkflowVersions = `-- name: ListWorkflowVersions :many
SELECT namespace, workflow_id, version, status, start_at, steps, created_by, published_by, created_at, published_at
FROM workflows
WHERE namespace = $1 AND workflow_id = $2
ORDER BY version DESC
`

type ListWorkflowVersionsParams struct {
	Namespace  string `json:"namespace"`
	WorkflowID string `json:"workflowId"`
}

func (q *Queries) ListWorkflowVersions(ctx context.Context, arg ListWorkflowVersionsParams) ([]*Workflow, error) {
	rows, err := q.db.Query(ctx, ListWorkflowVersions, arg.Namespace, arg.WorkflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Workflow{}
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(
			&i.Namespace,
			&i.WorkflowID,
			&i.Version,
			&i.Status,
			&i.StartAt,
			&i.Steps,
			&i.CreatedBy,
			&i.PublishedBy,
			&i.CreatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListWorkflows = `-- name: ListWorkflows :many
SELECT namespace, workflow_id, version, status, start_at, steps, created_by, published_by, created_at, published_at
FROM workflows
WHERE namespace = $1
ORDER BY workflow_id ASC, version DESC
`

func (q *Queries) ListWorkflows(ctx context.Context, namespace string) ([]*Workflow, error) {
	rows, err := q.db.Query(ctx, ListWorkflows, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Workflow{}
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(
			&i.Namespace,
			&i.WorkflowID,
			&i.Version,
			&i.Status,
			&i.StartAt,
			&i.Steps,
			&i.CreatedBy,
			&i.PublishedBy,
			&i.CreatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const PublishWorkflow = `-- name: PublishWorkflow :exec
UPDATE workflows
SET status = 'active', published_by = $4, published_at = now()
WHERE namespace = $1 AND workflow_id = $2 AND version = $3
`

type PublishWorkflowParams struct {
	Namespace   string  `json:"namespace"`
	WorkflowID  string  `json:"workflowId"`
	Version     int32   `json:"version"`
	PublishedBy *string `json:"publishedBy"`
}

func (q *Queries) PublishWorkflow(ctx context.Context, arg PublishWorkflowParams) error {
	_, err := q.db.Exec(ctx, PublishWorkflow,
		arg.Namespace,
		arg.WorkflowID,
		arg.Version,
		arg.PublishedBy,
	)
	return err
}

const UpdateWorkflow = `-- name: UpdateWorkflow :exec
UPDATE workflows
SET start_at = $4, steps = $5, created_by = $6
WHERE namespace = $1 AND workflow_id = $2 AND version = $3
`

type UpdateWorkflowParams struct {
	Namespace  string `json:"namespace"`
	WorkflowID string `json:"workflowId"`
	Version    int32  `json:"version"`
	StartAt    string `json:"startAt"`
	Steps      []byte `json:"steps"`
	CreatedBy  string `json:"createdBy"`
}

func (q *Queries) UpdateWorkflow(ctx context.Context, arg UpdateWorkflowParams) error {
	_, err := q.db.Exec(ctx, UpdateWorkflow,
		arg.Namespace,
		arg.WorkflowID,
		arg.Version,
		arg.StartAt,
		arg.Steps,
		arg.CreatedBy,
	)
	return err
}

const WorkflowExists = `-- name: WorkflowExists :one
SELECT EXISTS(
    SELECT 1 FROM workflows
    WHERE namespace = $1 AND workflow_id = $2 AND version = $3
)
`

type WorkflowExistsParams struct {
	Namespace  string `json:"namespace"`
	WorkflowID string `json:"workflowId"`
	Version    int32  `json:"version"`
}

func (q *Queries) WorkflowExists(ctx context.Context, arg WorkflowExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, WorkflowExists, arg.Namespace, arg.WorkflowID, arg.Version)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
