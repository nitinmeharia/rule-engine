// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: terminals.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CountTerminalsByNamespace = `-- name: CountTerminalsByNamespace :one
SELECT COUNT(*)
FROM terminals
WHERE namespace = $1
`

func (q *Queries) CountTerminalsByNamespace(ctx context.Context, namespace string) (int64, error) {
	row := q.db.QueryRow(ctx, CountTerminalsByNamespace, namespace)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateTerminal = `-- name: CreateTerminal :exec
INSERT INTO terminals (namespace, terminal_id, created_by)
VALUES ($1, $2, $3)
`

type CreateTerminalParams struct {
	Namespace  string `json:"namespace"`
	TerminalID string `json:"terminalId"`
	CreatedBy  string `json:"createdBy"`
}

func (q *Queries) CreateTerminal(ctx context.Context, arg CreateTerminalParams) error {
	_, err := q.db.Exec(ctx, CreateTerminal, arg.Namespace, arg.TerminalID, arg.CreatedBy)
	return err
}

const DeleteTerminal = `-- name: DeleteTerminal :exec
DELETE FROM terminals
WHERE namespace = $1 AND terminal_id = $2
`

type DeleteTerminalParams struct {
	Namespace  string `json:"namespace"`
	TerminalID string `json:"terminalId"`
}

func (q *Queries) DeleteTerminal(ctx context.Context, arg DeleteTerminalParams) error {
	_, err := q.db.Exec(ctx, DeleteTerminal, arg.Namespace, arg.TerminalID)
	return err
}

const GetTerminal = `-- name: GetTerminal :one
SELECT namespace, terminal_id, created_at, created_by
FROM terminals
WHERE namespace = $1 AND terminal_id = $2
`

type GetTerminalParams struct {
	Namespace  string `json:"namespace"`
	TerminalID string `json:"terminalId"`
}

type GetTerminalRow struct {
	Namespace  string             `json:"namespace"`
	TerminalID string             `json:"terminalId"`
	CreatedAt  pgtype.Timestamptz `json:"createdAt"`
	CreatedBy  string             `json:"createdBy"`
}

func (q *Queries) GetTerminal(ctx context.Context, arg GetTerminalParams) (*GetTerminalRow, error) {
	row := q.db.QueryRow(ctx, GetTerminal, arg.Namespace, arg.TerminalID)
	var i GetTerminalRow
	err := row.Scan(
		&i.Namespace,
		&i.TerminalID,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return &i, err
}

const ListTerminals = `-- name: ListTerminals :many
SELECT namespace, terminal_id, created_at, created_by
FROM terminals
WHERE namespace = $1
ORDER BY terminal_id ASC
`

type ListTerminalsRow struct {
	Namespace  string             `json:"namespace"`
	TerminalID string             `json:"terminalId"`
	CreatedAt  pgtype.Timestamptz `json:"createdAt"`
	CreatedBy  string             `json:"createdBy"`
}

func (q *Queries) ListTerminals(ctx context.Context, namespace string) ([]*ListTerminalsRow, error) {
	rows, err := q.db.Query(ctx, ListTerminals, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListTerminalsRow{}
	for rows.Next() {
		var i ListTerminalsRow
		if err := rows.Scan(
			&i.Namespace,
			&i.TerminalID,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const TerminalExists = `-- name: TerminalExists :one
SELECT EXISTS(
    SELECT 1 FROM terminals
    WHERE namespace = $1 AND terminal_id = $2
)
`

type TerminalExistsParams struct {
	Namespace  string `json:"namespace"`
	TerminalID string `json:"terminalId"`
}

func (q *Queries) TerminalExists(ctx context.Context, arg TerminalExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, TerminalExists, arg.Namespace, arg.TerminalID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
