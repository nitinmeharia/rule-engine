// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: fields.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CountFieldsByNamespace = `-- name: CountFieldsByNamespace :one
SELECT COUNT(*)
FROM fields
WHERE namespace = $1
`

func (q *Queries) CountFieldsByNamespace(ctx context.Context, namespace string) (int64, error) {
	row := q.db.QueryRow(ctx, CountFieldsByNamespace, namespace)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateField = `-- name: CreateField :exec
INSERT INTO fields (namespace, field_id, type, created_by)
VALUES ($1, $2, $3, $4)
`

type CreateFieldParams struct {
	Namespace string  `json:"namespace"`
	FieldID   string  `json:"fieldId"`
	Type      *string `json:"type"`
	CreatedBy string  `json:"createdBy"`
}

func (q *Queries) CreateField(ctx context.Context, arg CreateFieldParams) error {
	_, err := q.db.Exec(ctx, CreateField,
		arg.Namespace,
		arg.FieldID,
		arg.Type,
		arg.CreatedBy,
	)
	return err
}

const DeleteField = `-- name: DeleteField :exec
DELETE FROM fields
WHERE namespace = $1 AND field_id = $2
`

type DeleteFieldParams struct {
	Namespace string `json:"namespace"`
	FieldID   string `json:"fieldId"`
}

func (q *Queries) DeleteField(ctx context.Context, arg DeleteFieldParams) error {
	_, err := q.db.Exec(ctx, DeleteField, arg.Namespace, arg.FieldID)
	return err
}

const FieldExists = `-- name: FieldExists :one
SELECT EXISTS(
    SELECT 1 FROM fields
    WHERE namespace = $1 AND field_id = $2
)
`

type FieldExistsParams struct {
	Namespace string `json:"namespace"`
	FieldID   string `json:"fieldId"`
}

func (q *Queries) FieldExists(ctx context.Context, arg FieldExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, FieldExists, arg.Namespace, arg.FieldID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const GetField = `-- name: GetField :one
SELECT namespace, field_id, type, created_at, created_by
FROM fields
WHERE namespace = $1 AND field_id = $2
`

type GetFieldParams struct {
	Namespace string `json:"namespace"`
	FieldID   string `json:"fieldId"`
}

type GetFieldRow struct {
	Namespace string             `json:"namespace"`
	FieldID   string             `json:"fieldId"`
	Type      *string            `json:"type"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	CreatedBy string             `json:"createdBy"`
}

func (q *Queries) GetField(ctx context.Context, arg GetFieldParams) (*GetFieldRow, error) {
	row := q.db.QueryRow(ctx, GetField, arg.Namespace, arg.FieldID)
	var i GetFieldRow
	err := row.Scan(
		&i.Namespace,
		&i.FieldID,
		&i.Type,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return &i, err
}

const ListFields = `-- name: ListFields :many
SELECT namespace, field_id, type, created_at, created_by
FROM fields
WHERE namespace = $1
ORDER BY field_id ASC
`

type ListFieldsRow struct {
	Namespace string             `json:"namespace"`
	FieldID   string             `json:"fieldId"`
	Type      *string            `json:"type"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	CreatedBy string             `json:"createdBy"`
}

func (q *Queries) ListFields(ctx context.Context, namespace string) ([]*ListFieldsRow, error) {
	rows, err := q.db.Query(ctx, ListFields, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListFieldsRow{}
	for rows.Next() {
		var i ListFieldsRow
		if err := rows.Scan(
			&i.Namespace,
			&i.FieldID,
			&i.Type,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateField = `-- name: UpdateField :exec
UPDATE fields
SET type = $3, created_by = $4
WHERE namespace = $1 AND field_id = $2
`

type UpdateFieldParams struct {
	Namespace string  `json:"namespace"`
	FieldID   string  `json:"fieldId"`
	Type      *string `json:"type"`
	CreatedBy string  `json:"createdBy"`
}

func (q *Queries) UpdateField(ctx context.Context, arg UpdateFieldParams) error {
	_, err := q.db.Exec(ctx, UpdateField,
		arg.Namespace,
		arg.FieldID,
		arg.Type,
		arg.CreatedBy,
	)
	return err
}
