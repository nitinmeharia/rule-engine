// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: namespaces.sql

package db

import (
	"context"
)

const CreateNamespace = `-- name: CreateNamespace :exec
INSERT INTO namespaces (id, description, created_by)
VALUES ($1, $2, $3)
`

type CreateNamespaceParams struct {
	ID          string  `json:"id"`
	Description *string `json:"description"`
	CreatedBy   string  `json:"createdBy"`
}

func (q *Queries) CreateNamespace(ctx context.Context, arg CreateNamespaceParams) error {
	_, err := q.db.Exec(ctx, CreateNamespace, arg.ID, arg.Description, arg.CreatedBy)
	return err
}

const DeleteNamespace = `-- name: DeleteNamespace :exec
DELETE FROM namespaces WHERE id = $1
`

func (q *Queries) DeleteNamespace(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, DeleteNamespace, id)
	return err
}

const GetNamespace = `-- name: GetNamespace :one
SELECT id, description, created_at, created_by
FROM namespaces
WHERE id = $1
`

func (q *Queries) GetNamespace(ctx context.Context, id string) (*Namespace, error) {
	row := q.db.QueryRow(ctx, GetNamespace, id)
	var i Namespace
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return &i, err
}

const ListNamespaces = `-- name: ListNamespaces :many
SELECT id, description, created_at, created_by
FROM namespaces
ORDER BY created_at ASC
`

func (q *Queries) ListNamespaces(ctx context.Context) ([]*Namespace, error) {
	rows, err := q.db.Query(ctx, ListNamespaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Namespace{}
	for rows.Next() {
		var i Namespace
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
