// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cache.sql

package db

import (
	"context"
)

const DeleteActiveConfigChecksum = `-- name: DeleteActiveConfigChecksum :exec
DELETE FROM active_config_meta
WHERE namespace = $1
`

func (q *Queries) DeleteActiveConfigChecksum(ctx context.Context, namespace string) error {
	_, err := q.db.Exec(ctx, DeleteActiveConfigChecksum, namespace)
	return err
}

const GetActiveConfigChecksum = `-- name: GetActiveConfigChecksum :one
SELECT namespace, checksum, updated_at
FROM active_config_meta
WHERE namespace = $1
`

func (q *Queries) GetActiveConfigChecksum(ctx context.Context, namespace string) (*ActiveConfigMetum, error) {
	row := q.db.QueryRow(ctx, GetActiveConfigChecksum, namespace)
	var i ActiveConfigMetum
	err := row.Scan(&i.Namespace, &i.Checksum, &i.UpdatedAt)
	return &i, err
}

const ListAllActiveConfigChecksums = `-- name: ListAllActiveConfigChecksums :many
SELECT namespace, checksum, updated_at
FROM active_config_meta
ORDER BY namespace ASC
`

func (q *Queries) ListAllActiveConfigChecksums(ctx context.Context) ([]*ActiveConfigMetum, error) {
	rows, err := q.db.Query(ctx, ListAllActiveConfigChecksums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ActiveConfigMetum{}
	for rows.Next() {
		var i ActiveConfigMetum
		if err := rows.Scan(&i.Namespace, &i.Checksum, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const RefreshNamespaceChecksum = `-- name: RefreshNamespaceChecksum :exec
SELECT refresh_checksum($1)
`

func (q *Queries) RefreshNamespaceChecksum(ctx context.Context, ns string) error {
	_, err := q.db.Exec(ctx, RefreshNamespaceChecksum, ns)
	return err
}

const UpsertActiveConfigChecksum = `-- name: UpsertActiveConfigChecksum :exec
INSERT INTO active_config_meta (namespace, checksum, updated_at)
VALUES ($1, $2, now())
ON CONFLICT (namespace)
DO UPDATE SET
    checksum = EXCLUDED.checksum,
    updated_at = EXCLUDED.updated_at
`

type UpsertActiveConfigChecksumParams struct {
	Namespace string `json:"namespace"`
	Checksum  string `json:"checksum"`
}

func (q *Queries) UpsertActiveConfigChecksum(ctx context.Context, arg UpsertActiveConfigChecksumParams) error {
	_, err := q.db.Exec(ctx, UpsertActiveConfigChecksum, arg.Namespace, arg.Checksum)
	return err
}
