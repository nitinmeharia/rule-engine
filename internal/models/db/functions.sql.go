// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: functions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateFunction = `-- name: CreateFunction :exec
INSERT INTO functions (namespace, function_id, version, status, type, args, values, return_type, created_by)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateFunctionParams struct {
	Namespace  string   `json:"namespace"`
	FunctionID string   `json:"functionId"`
	Version    int32    `json:"version"`
	Status     *string  `json:"status"`
	Type       *string  `json:"type"`
	Args       []string `json:"args"`
	Values     []string `json:"values"`
	ReturnType *string  `json:"returnType"`
	CreatedBy  string   `json:"createdBy"`
}

func (q *Queries) CreateFunction(ctx context.Context, arg CreateFunctionParams) error {
	_, err := q.db.Exec(ctx, CreateFunction,
		arg.Namespace,
		arg.FunctionID,
		arg.Version,
		arg.Status,
		arg.Type,
		arg.Args,
		arg.Values,
		arg.ReturnType,
		arg.CreatedBy,
	)
	return err
}

const DeactivateFunction = `-- name: DeactivateFunction :exec
UPDATE functions
SET status = 'inactive'
WHERE namespace = $1 AND function_id = $2 AND status = 'active'
`

type DeactivateFunctionParams struct {
	Namespace  string `json:"namespace"`
	FunctionID string `json:"functionId"`
}

func (q *Queries) DeactivateFunction(ctx context.Context, arg DeactivateFunctionParams) error {
	_, err := q.db.Exec(ctx, DeactivateFunction, arg.Namespace, arg.FunctionID)
	return err
}

const DeleteFunction = `-- name: DeleteFunction :exec
DELETE FROM functions
WHERE namespace = $1 AND function_id = $2 AND version = $3
`

type DeleteFunctionParams struct {
	Namespace  string `json:"namespace"`
	FunctionID string `json:"functionId"`
	Version    int32  `json:"version"`
}

func (q *Queries) DeleteFunction(ctx context.Context, arg DeleteFunctionParams) error {
	_, err := q.db.Exec(ctx, DeleteFunction, arg.Namespace, arg.FunctionID, arg.Version)
	return err
}

const FunctionExists = `-- name: FunctionExists :one
SELECT EXISTS(
    SELECT 1 FROM functions
    WHERE namespace = $1 AND function_id = $2 AND version = $3
)
`

type FunctionExistsParams struct {
	Namespace  string `json:"namespace"`
	FunctionID string `json:"functionId"`
	Version    int32  `json:"version"`
}

func (q *Queries) FunctionExists(ctx context.Context, arg FunctionExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, FunctionExists, arg.Namespace, arg.FunctionID, arg.Version)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const GetActiveFunctionVersion = `-- name: GetActiveFunctionVersion :one
SELECT namespace, function_id, version, status, type, args, values, created_by, published_by, created_at, published_at
FROM functions
WHERE namespace = $1 AND function_id = $2 AND status = 'active'
`

type GetActiveFunctionVersionParams struct {
	Namespace  string `json:"namespace"`
	FunctionID string `json:"functionId"`
}

type GetActiveFunctionVersionRow struct {
	Namespace   string             `json:"namespace"`
	FunctionID  string             `json:"functionId"`
	Version     int32              `json:"version"`
	Status      *string            `json:"status"`
	Type        *string            `json:"type"`
	Args        []string           `json:"args"`
	Values      []string           `json:"values"`
	CreatedBy   string             `json:"createdBy"`
	PublishedBy *string            `json:"publishedBy"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	PublishedAt pgtype.Timestamptz `json:"publishedAt"`
}

func (q *Queries) GetActiveFunctionVersion(ctx context.Context, arg GetActiveFunctionVersionParams) (*GetActiveFunctionVersionRow, error) {
	row := q.db.QueryRow(ctx, GetActiveFunctionVersion, arg.Namespace, arg.FunctionID)
	var i GetActiveFunctionVersionRow
	err := row.Scan(
		&i.Namespace,
		&i.FunctionID,
		&i.Version,
		&i.Status,
		&i.Type,
		&i.Args,
		&i.Values,
		&i.CreatedBy,
		&i.PublishedBy,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return &i, err
}

const GetDraftFunctionVersion = `-- name: GetDraftFunctionVersion :one
SELECT namespace, function_id, version, status, type, args, values, created_by, published_by, created_at, published_at
FROM functions
WHERE namespace = $1 AND function_id = $2 AND status = 'draft'
`

type GetDraftFunctionVersionParams struct {
	Namespace  string `json:"namespace"`
	FunctionID string `json:"functionId"`
}

type GetDraftFunctionVersionRow struct {
	Namespace   string             `json:"namespace"`
	FunctionID  string             `json:"functionId"`
	Version     int32              `json:"version"`
	Status      *string            `json:"status"`
	Type        *string            `json:"type"`
	Args        []string           `json:"args"`
	Values      []string           `json:"values"`
	CreatedBy   string             `json:"createdBy"`
	PublishedBy *string            `json:"publishedBy"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	PublishedAt pgtype.Timestamptz `json:"publishedAt"`
}

func (q *Queries) GetDraftFunctionVersion(ctx context.Context, arg GetDraftFunctionVersionParams) (*GetDraftFunctionVersionRow, error) {
	row := q.db.QueryRow(ctx, GetDraftFunctionVersion, arg.Namespace, arg.FunctionID)
	var i GetDraftFunctionVersionRow
	err := row.Scan(
		&i.Namespace,
		&i.FunctionID,
		&i.Version,
		&i.Status,
		&i.Type,
		&i.Args,
		&i.Values,
		&i.CreatedBy,
		&i.PublishedBy,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return &i, err
}

const GetFunction = `-- name: GetFunction :one
SELECT namespace, function_id, version, status, type, args, values, created_by, published_by, created_at, published_at
FROM functions
WHERE namespace = $1 AND function_id = $2 AND version = $3
`

type GetFunctionParams struct {
	Namespace  string `json:"namespace"`
	FunctionID string `json:"functionId"`
	Version    int32  `json:"version"`
}

type GetFunctionRow struct {
	Namespace   string             `json:"namespace"`
	FunctionID  string             `json:"functionId"`
	Version     int32              `json:"version"`
	Status      *string            `json:"status"`
	Type        *string            `json:"type"`
	Args        []string           `json:"args"`
	Values      []string           `json:"values"`
	CreatedBy   string             `json:"createdBy"`
	PublishedBy *string            `json:"publishedBy"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	PublishedAt pgtype.Timestamptz `json:"publishedAt"`
}

func (q *Queries) GetFunction(ctx context.Context, arg GetFunctionParams) (*GetFunctionRow, error) {
	row := q.db.QueryRow(ctx, GetFunction, arg.Namespace, arg.FunctionID, arg.Version)
	var i GetFunctionRow
	err := row.Scan(
		&i.Namespace,
		&i.FunctionID,
		&i.Version,
		&i.Status,
		&i.Type,
		&i.Args,
		&i.Values,
		&i.CreatedBy,
		&i.PublishedBy,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return &i, err
}

const GetMaxFunctionVersion = `-- name: GetMaxFunctionVersion :one
SELECT COALESCE(MAX(version), 0) as max_version
FROM functions
WHERE namespace = $1 AND function_id = $2
`

type GetMaxFunctionVersionParams struct {
	Namespace  string `json:"namespace"`
	FunctionID string `json:"functionId"`
}

func (q *Queries) GetMaxFunctionVersion(ctx context.Context, arg GetMaxFunctionVersionParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, GetMaxFunctionVersion, arg.Namespace, arg.FunctionID)
	var max_version interface{}
	err := row.Scan(&max_version)
	return max_version, err
}

const ListActiveFunctions = `-- name: ListActiveFunctions :many
SELECT namespace, function_id, version, status, type, args, values, created_by, published_by, created_at, published_at
FROM functions
WHERE namespace = $1 AND status = 'active'
ORDER BY function_id ASC
`

type ListActiveFunctionsRow struct {
	Namespace   string             `json:"namespace"`
	FunctionID  string             `json:"functionId"`
	Version     int32              `json:"version"`
	Status      *string            `json:"status"`
	Type        *string            `json:"type"`
	Args        []string           `json:"args"`
	Values      []string           `json:"values"`
	CreatedBy   string             `json:"createdBy"`
	PublishedBy *string            `json:"publishedBy"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	PublishedAt pgtype.Timestamptz `json:"publishedAt"`
}

func (q *Queries) ListActiveFunctions(ctx context.Context, namespace string) ([]*ListActiveFunctionsRow, error) {
	rows, err := q.db.Query(ctx, ListActiveFunctions, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListActiveFunctionsRow{}
	for rows.Next() {
		var i ListActiveFunctionsRow
		if err := rows.Scan(
			&i.Namespace,
			&i.FunctionID,
			&i.Version,
			&i.Status,
			&i.Type,
			&i.Args,
			&i.Values,
			&i.CreatedBy,
			&i.PublishedBy,
			&i.CreatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListFunctionVersions = `-- name: ListFunctionVersions :many
SELECT namespace, function_id, version, status, type, args, values, created_by, published_by, created_at, published_at
FROM functions
WHERE namespace = $1 AND function_id = $2
ORDER BY version DESC
`

type ListFunctionVersionsParams struct {
	Namespace  string `json:"namespace"`
	FunctionID string `json:"functionId"`
}

type ListFunctionVersionsRow struct {
	Namespace   string             `json:"namespace"`
	FunctionID  string             `json:"functionId"`
	Version     int32              `json:"version"`
	Status      *string            `json:"status"`
	Type        *string            `json:"type"`
	Args        []string           `json:"args"`
	Values      []string           `json:"values"`
	CreatedBy   string             `json:"createdBy"`
	PublishedBy *string            `json:"publishedBy"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	PublishedAt pgtype.Timestamptz `json:"publishedAt"`
}

func (q *Queries) ListFunctionVersions(ctx context.Context, arg ListFunctionVersionsParams) ([]*ListFunctionVersionsRow, error) {
	rows, err := q.db.Query(ctx, ListFunctionVersions, arg.Namespace, arg.FunctionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListFunctionVersionsRow{}
	for rows.Next() {
		var i ListFunctionVersionsRow
		if err := rows.Scan(
			&i.Namespace,
			&i.FunctionID,
			&i.Version,
			&i.Status,
			&i.Type,
			&i.Args,
			&i.Values,
			&i.CreatedBy,
			&i.PublishedBy,
			&i.CreatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListFunctions = `-- name: ListFunctions :many
SELECT namespace, function_id, version, status, type, args, values, created_by, published_by, created_at, published_at
FROM functions
WHERE namespace = $1
ORDER BY function_id ASC, version DESC
`

type ListFunctionsRow struct {
	Namespace   string             `json:"namespace"`
	FunctionID  string             `json:"functionId"`
	Version     int32              `json:"version"`
	Status      *string            `json:"status"`
	Type        *string            `json:"type"`
	Args        []string           `json:"args"`
	Values      []string           `json:"values"`
	CreatedBy   string             `json:"createdBy"`
	PublishedBy *string            `json:"publishedBy"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	PublishedAt pgtype.Timestamptz `json:"publishedAt"`
}

func (q *Queries) ListFunctions(ctx context.Context, namespace string) ([]*ListFunctionsRow, error) {
	rows, err := q.db.Query(ctx, ListFunctions, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListFunctionsRow{}
	for rows.Next() {
		var i ListFunctionsRow
		if err := rows.Scan(
			&i.Namespace,
			&i.FunctionID,
			&i.Version,
			&i.Status,
			&i.Type,
			&i.Args,
			&i.Values,
			&i.CreatedBy,
			&i.PublishedBy,
			&i.CreatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const PublishFunction = `-- name: PublishFunction :exec
UPDATE functions
SET status = 'active', published_by = $4, published_at = now()
WHERE namespace = $1 AND function_id = $2 AND version = $3
`

type PublishFunctionParams struct {
	Namespace   string  `json:"namespace"`
	FunctionID  string  `json:"functionId"`
	Version     int32   `json:"version"`
	PublishedBy *string `json:"publishedBy"`
}

func (q *Queries) PublishFunction(ctx context.Context, arg PublishFunctionParams) error {
	_, err := q.db.Exec(ctx, PublishFunction,
		arg.Namespace,
		arg.FunctionID,
		arg.Version,
		arg.PublishedBy,
	)
	return err
}

const UpdateFunction = `-- name: UpdateFunction :exec
UPDATE functions
SET type = $4, args = $5, values = $6, return_type = $7, created_by = $8
WHERE namespace = $1 AND function_id = $2 AND version = $3
`

type UpdateFunctionParams struct {
	Namespace  string   `json:"namespace"`
	FunctionID string   `json:"functionId"`
	Version    int32    `json:"version"`
	Type       *string  `json:"type"`
	Args       []string `json:"args"`
	Values     []string `json:"values"`
	ReturnType *string  `json:"returnType"`
	CreatedBy  string   `json:"createdBy"`
}

func (q *Queries) UpdateFunction(ctx context.Context, arg UpdateFunctionParams) error {
	_, err := q.db.Exec(ctx, UpdateFunction,
		arg.Namespace,
		arg.FunctionID,
		arg.Version,
		arg.Type,
		arg.Args,
		arg.Values,
		arg.ReturnType,
		arg.CreatedBy,
	)
	return err
}
